name: Deploy ExpressAid Website to Azure

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
  AZURE_STATIC_WEB_APPS_URL: ${{ secrets.AZURE_STATIC_WEB_APPS_URL }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate website files
        run: npm run validate

      - name: Build website
        run: |
          echo "Creating build output..."
          mkdir -p dist
          cp -r *.html *.css assets/ dist/
          echo "Build completed"

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/" # App source code path
          api_location: "" # Api source code path - leave empty if not using API
          output_location: "dist" # Built app content directory
          deployment_environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

      - name: Post-deployment health check
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          echo "Running health check..."
          # Add your health check URL here
          # curl -f ${{ secrets.AZURE_STATIC_WEB_APPS_URL }} || exit 1
          echo "Health check completed"

  test:
    runs-on: ubuntu-latest
    name: Test Website
    needs: build_and_deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install test dependencies
        run: npm install -g lighthouse

      - name: Run Lighthouse audit
        run: |
          echo "Running Lighthouse audit..."
          lighthouse ${{ secrets.AZURE_STATIC_WEB_APPS_URL }} --output=json --output-path=./lighthouse-report.json --chrome-flags="--headless --no-sandbox"
          echo "Lighthouse audit completed"

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: lighthouse-report.json

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment
    needs: [build_and_deploy, test]
    if: github.ref == 'refs/heads/main' && always()
    steps:
      - name: Notify on success
        if: needs.build_and_deploy.result == 'success' && needs.test.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåê Website URL: ${{ secrets.AZURE_STATIC_WEB_APPS_URL }}"
          # Add notification logic here (Slack, Teams, etc.)

      - name: Notify on failure
        if: needs.build_and_deploy.result == 'failure' || needs.test.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          # Add failure notification logic here 